// Mocks generated by Mockito 5.4.4 from annotations
// in notes_app_testing_starter/test/presentation/screens/todo_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notes_app_testing_starter/cubits/todo_cubit.dart' as _i3;
import 'package:notes_app_testing_starter/data/models/todo.dart' as _i5;
import 'package:notes_app_testing_starter/data/todo_local_data_source.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalDataSource_0 extends _i1.SmartFake
    implements _i2.LocalDataSource {
  _FakeLocalDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodosState_1 extends _i1.SmartFake implements _i3.TodosState {
  _FakeTodosState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodosCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosCubit extends _i1.Mock implements _i3.TodosCubit {
  @override
  _i2.LocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeLocalDataSource_0(
          this,
          Invocation.getter(#localDataSource),
        ),
        returnValueForMissingStub: _FakeLocalDataSource_0(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i2.LocalDataSource);

  @override
  _i3.TodosState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTodosState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTodosState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.TodosState);

  @override
  _i4.Stream<_i3.TodosState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.TodosState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.TodosState>.empty(),
      ) as _i4.Stream<_i3.TodosState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void addTodo(_i5.Todo? todo) => super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleTodoStatus(_i5.Todo? todo) => super.noSuchMethod(
        Invocation.method(
          #toggleTodoStatus,
          [todo],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteTodo(int? id) => super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.TodosState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i6.Change<_i3.TodosState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
